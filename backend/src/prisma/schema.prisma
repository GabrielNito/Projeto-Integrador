datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    Int       @id @default(autoincrement())
  username              String
  password              String
  email                 String    @unique
  role                  String    @default("STUDENT")
  status                String    @default("active")
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  likedPosts            String?
  likedThreads          String?
  avatar                String?

  badges                UserBadge[]
  createdPosts          Post[]
  createdThreads        Thread[]
  visits                Visit[]
  allowedNotifications  UserNotification[]
}

model Post { 
  id          Int       @id @default(autoincrement())
  content     String
  likes       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int       
  threadId    Int       

  user        User      @relation(fields: [userId], references: [id])
  thread      Thread    @relation(fields: [threadId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Thread {
  id          Int       @id @default(autoincrement())
  title       String
  likes       Int       @default(0)
  isClosed    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int       

  user        User      @relation(fields: [userId], references: [id])
  posts       Post[]
}

model Visit {
  id          Int       @id @default(autoincrement())
  exitedAt    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  userId      Int?      

  user        User?     @relation(fields: [userId], references: [id])
}

model Notification {
  id     Int      @id @default(autoincrement())
  title  String   

  users  UserNotification[]
}

model UserNotification {
  userId         Int
  notificationId Int

  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  notification   Notification  @relation(fields: [notificationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, notificationId])
}

model Badge {
  id       Int    @id @default(autoincrement())
  title    String
  style    String?
  iconPath String?

  users    UserBadge[]
}

model UserBadge {
  userId  Int
  badgeId Int

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  badge   Badge  @relation(fields: [badgeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, badgeId])
}
