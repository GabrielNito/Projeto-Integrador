datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id                    Int       @id @default(autoincrement())
  username              String
  password              String
  email                 String    @unique
  role                  String
  status                String    @default("active")
  createAt              DateTime  @default(now())
  updateAt              DateTime  @updatedAt
  likedPosts            String?
  likedThreads          String?
  avatar                String?

  badges                UserBadges[]
  createdPosts          Posts[]
  createdThreads        Threads[]
  visits                Visits[]
  allowedNotifications  UserNotifications[]
}

model Posts { 
  id          Int       @id @default(autoincrement())
  content     String
  likes       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int       
  threadId    Int       

  user        Users     @relation(fields: [userId], references: [id])
  thread      Threads   @relation(fields: [threadId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Threads {
  id          Int       @id @default(autoincrement())
  title       String
  likes       Int       @default(0)
  isClosed    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int       

  user        Users     @relation(fields: [userId], references: [id])
  posts       Posts[]
}

model Visits {
  id          Int       @id @default(autoincrement())
  exitedAt    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  userId      Int?      

  user        Users?    @relation(fields: [userId], references: [id])
}

model Notifications {
  id     Int      @id @default(autoincrement())
  title  String   

  users  UserNotifications[]
}

model UserNotifications {
  userId        Int
  notificationId Int

  user          Users          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  notification  Notifications  @relation(fields: [notificationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, notificationId])
}

model Badges {
  id  Int @id @default(autoincrement())
  title String
  iconPath String

  user UserBadges[]
}

model UserBadges {
  userId  Int
  badgeId Int

  user Users? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  badges Badges @relation(fields: [badgeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, badgeId])

}